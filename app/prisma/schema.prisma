generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  firstName String
  middleName String?
  lastName String
  suffixName String?
  emailAddress String @unique
  password String
  profileImage BinData
  bio String?
  barangay String
  street String
  houseNumber String?
  userType String @default(value: "client")
  jobSeeker JobSeeker[]
  @@map("users")
}

model JobSeeker {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
  availability Bool
  credentials BinData
  hourlyRate String
  jobTags JobTag[]
  achievement Achievement @relation(fields: [achievementId], references: [id])
  achievementId String @db.ObjectId
  milestone Milestone @relation(fields: [milestoneId], references: [id])
  milestoneId String @db.ObjectId
}

enum JobTag {
  
}

model Achievement {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  achievementName String @unique
  jobRequired String
  requiredJobCount Int 
  achievementIcon BinData
  @@map("achievements")
}

model Milestone {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  milestoneTitle String
  milestoneDescription String
  jobsCompleted Int
  experienceLevel String
  achievedAt DateTime @default(value: now())
  @@map("milestones")
}

model JobRequest {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  client User @relation(fields: [clientId], references: [id])
  clientId String @db.ObjectId
  jobSeeker JobSeeker @relation(fields: [jobSeekerId], references: [id])
  jobSeekerId String @db.ObjectId
}
